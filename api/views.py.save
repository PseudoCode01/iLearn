from django.shortcuts import render

from .serializers import LoginSerializer 
from rest_framework.parsers import FileUploadParser
from .serializers import CategorySerializer ,CreateCourseSerializer,VideoSerializer,AnswerQuerySerializer,GetVideosSerializer,AddCartSerializer,HomeTutorSerializer,RemoveCartSerializer,GetHomeTutorSerializer,ADDMYCOURSESSerializer,ContactUs,TestResultSerializer,GetQuizeResultSerializer,TestAllSerializer,AddTestCartSerializer,TestCart,RemoveTestCartSerializer,TestSerializer,EditHomeTutorSerializer,GetPaidVideosSerializer,GetUrlSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import TokenAuthentication
from .serializers import RegistrationSerializer
from rest_framework.views import APIView
from django.contrib.auth import authenticate
from rest_framework.response import Response
from rest_framework.authtoken.models import Token
from rest_framework.generics import GenericAPIView
from rest_framework import status
from rest_framework.permissions import IsAdminUser
from django.contrib.auth import login as django_login, logout as django_logout
from django.contrib.auth.models import User
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.decorators import api_view, authentication_classes, permission_classes
from rest_framework import generics
from home.models import Categories,Courses,HomeTutor,Courses,Videos,WatchedVideos,Cart,MyCourses,Contact,Test,TestResult,MyTest
from mutagen.mp4 import MP4
from django.shortcuts import render
from PayTm import Checksum
from django.http import JsonResponse
import boto3

# from moviepy.editor import *
from django.views.decorators.csrf import csrf_exempt

from django.db.models import Q
MERCHANT_KEY = '0K5Uhk4At%X1t80Q'
session = boto3.session.Session()
key='W55UFC7TLFNFFNAFPCSX'
secret='Nb0GaC9os1fQlYVxJpP4y5wpTLZdQUctR1fTHqle+aI'
@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def geturl(request):
    if request.method=='POST':
        serializer = GetUrlSerializer(data=request.data)
        file=request.data['curl']
        client=session.client('s3',region_name='sgp1',endpoint_url='https://sgp1.digitaloceanspaces.com',aws_access_key_id=key,aws_secret_access_key=secret)
        urli=client.generate_presigned_url(ClientMethod='get_object',Params={'Bucket':'cognedu-spaces','Key':file},ExpiresIn=300)
        return Response({'data':urli})

@api_view(['POST', ])
@permission_classes([])
@authentication_classes([])
def registration_view(request):
    if request.method == 'POST':
        data = {}
        email = request.data.get('email', '0').lower()
        if validate_email(email) != None:
            data['error_message'] = 'That email is already in use.'
            data['response'] = 'Error'
            return Response(data)

        username = request.data.get('username', '0')
        if validate_username(username) != None:
            data['error_message'] = 'That username is already in use.'
            data['response'] = 'Error'
            return Response(data)

        serializer = RegistrationSerializer(data=request.data)
        
        if serializer.is_valid():
            account = serializer.save()
            data['response'] = 'successfully registered new user.'
            data['email'] = account.email
            data['role'] = account.first_name
            data['username'] = account.username
            token = Token.objects.get(user=account).key
            data['token'] = token
        else:
            data = serializer.errors
        return Response(data)

def validate_email(email):
    account = None
    try:
        account =   User.objects.get(email=email)
    except User.DoesNotExist:
        return None
    if account != None:
        return email

def validate_username(username):
    account = None
    try:
        account = User.objects.get(username=username)
    except User.DoesNotExist:
        return None
    if account != None:
        return username



class ObtainAuthTokenView(APIView):
    serializer_class = LoginSerializer
    authentication_classes = []
    permission_classes = []

    def post(self, request):
        context = {}
        serializer = LoginSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data["user"]
        django_login(request, user)
        token, created = Token.objects.get_or_create(user=user)
        return Response({"token": token.key,'role':user.first_name}, status=200)
@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def logout(request):
    try:
        request.user.auth_token.delete()
        return Response(status=status.HTTP_200_OK)
    except(AttributeError):
       return Response(status=204)
@api_view(['POST', ])
@permission_classes(())
@authentication_classes([])
def categories(request):
    cat=list(Categories.objects.all().values())
    serializer_class=CategorySerializer
    course=set()
    sub_cat=set()
    sub_cat2=set()
    for cours in cat:
        course.add(cours['category'])
        sub_cat.add((cours['sub_category'],cours['category']))
        sub_cat2.add((cours['sub_category'],cours['sub_category2']))
    print(course)
    return Response({'categories':cat,'course':course,'sub_cat':sub_cat,'sub_cat2':sub_cat2},status=200)
@api_view(['POST', ])
@permission_classes(())
@authentication_classes([])
def courses(request):
    serializer = CategorySerializer(data=request.data)
    cat=request.data.get('s')
    scat=request.data.get('sc')
    scat2=request.data.get('sc2')
    courses=list(Courses.objects.filter(category=cat).filter(sub_category=scat).filter(sub_category2=scat2).filter
    (verified="True").values().order_by('category'))
    print(courses)
    return Response({'courses':courses},status=200)

@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def reghometutor(request):
    serializer = HomeTutorSerializer(data=request.data)
    name=request.data.get('name')
    email=request.data.get('email')
    phone=request.data.get('phone')
    age=request.data.get('age')
    gender=request.data.get('gender')
    pin=request.data.get('pin')
    state=request.data.get('state')
    district=request.data.get('district')
    subject=request.data.get('subject')
    classes=request.data.get('classes')
    disc=request.data.get('discription')
    salaryL=request.data.get('salaryL')
    id_proof=request.data.get('id_proof')
    salaryH=request.data.get('salaryH')
    salaryL=int(salaryL.split('.')[0])
    salaryH=int(salaryH.split('.')[0])
    print(name,email,phone,age,gender,pin,district,subject,classes)
    if  len(name)>4 and len(age)!=0 and len(gender)!=0 and len(phone)>9 and len(email)>0 and len(pin)==6 and len(district)>0 and len(state)>0 and len(subject)>0 and len(classes)>0 and len(disc)>0 and (salaryL)>0 and (salaryH)>0:
        ht=HomeTutor(user=request.user,name=name,age=age,gender=gender,phone=phone,email=email,pin=pin,district=district,
                state=state,subject=subject,classes=classes,discription=disc,salaryL=salaryL,salaryH=salaryH,registered_for='Home Tutor',verified='False',id_proof=id_proof)
        ht.save()
        return Response({'Response':'OK'},status=200)
    else:
        return Response({'Response':'Error'},status=204)
@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def edithometutor(request):
    serializer = HomeTutorSerializer(data=request.data)
    sno=request.data.get('sno')
    name=request.data.get('name')
    email=request.data.get('email')
    phone=request.data.get('phone')
    age=request.data.get('age')
    gender=request.data.get('gender')
    pin=request.data.get('pin')
    state=request.data.get('state')
    district=request.data.get('district')
    subject=request.data.get('subject')
    classes=request.data.get('classes')
    disc=request.data.get('discription')
    salaryL=request.data.get('salaryL')
    id_proof=request.data.get('id_proof')
    salaryH=request.data.get('salaryH')
    salaryL=int(salaryL.split('.')[0])
    salaryH=int(salaryH.split('.')[0])
    ht=HomeTutor.objects.get(sno=int(sno))
    ht.name=name
    ht.age=age
    ht.gender=gender
    ht.phone=phone
    ht.email=email
    ht.pin=pin
    ht.district=district
    ht.state=state
    ht.subject=subject
    ht.classes=classes
    ht.discription=disc
    ht.salaryL=salaryL
    ht.salaryH=salaryH
    ht.id_proof=id_proof
    ht.save()
        
    return Response({'Response':'OK'},status=200)


class Createcourse(APIView):
    parser_class=(FileUploadParser,)
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = CreateCourseSerializer(data=request.data)
        title=request.data.get('title')
        category=request.data.get('category')
        sub_category=request.data.get('sub_category')
        sub_category2=request.data.get('sub_category2')
        courseThumbnail=request.data.get('courseThumbnail')
        discription=request.data.get('discription')
        language=request.data.get('language')
        pricing=request.data.get('pricing')
        c=Courses(title=title,category=category,sub_category=sub_category,sub_category2=sub_category2,language=language,courseThumbnail=courseThumbnail,discription=discription,pricing=pricing,creater_name=request.user.username,creater=request.user)
        c.save()
        print(courseThumbnail,request.user.username)
        return Response({'Response':'Done'},status=200)


class AddVideo(APIView):
    parser_class=(FileUploadParser,)
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = VideoSerializer(data=request.data)
        videoTitle=request.data.get('videoTitle')
        videofile=request.data.get('videofile')
        thumbnail=request.data.get('thumbnail')
        resource=request.data.get('resource')
        videoOfCourse=request.data.get('videoOfCourse')
        v=Courses.objects.get(sno=int(videoOfCourse))
        c=Videos(videoTitle=videoTitle,videofile=videofile,thumbnail=thumbnail,resource=resource,videoOfCourse=v,creater=request.user)
        c.save()
        return Response({'Response':'Done'},status=200)
class GetVideo(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = GetVideosSerializer(data=request.data)
        videoOfCourse=request.data.get('videoOfCourse')
        c=Courses.objects.get(sno=int(videoOfCourse))
        v=list(Videos.objects.filter(videoOfCourse=c).order_by('timeStamp').values())
        print(v)
        
        return Response({'Response':v},status=200)




@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def createdcourses(request):
    courses=list(Courses.objects.filter(creater=request.user).values().order_by('category'))
    return Response({'courses':courses},status=200)

    
@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def performance(request):
    courses=list(Courses.objects.filter(creater=request.user).values().order_by('category'))
    print(request.user.id)
    return Response({'courses':courses},status=200)
@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def studentquery(request):
    courses=list(WatchedVideos.objects.filter(creater=request.user.id).values().order_by('timeStamp'))
    q=[]
    for item in courses:
        if(len(item['answer'])<2):
            user=User.objects.get(id=int(item['user_id']))
            q.append([item,user.username])

    
    return Response({'query':q},status=200)

class AnswerQuery(APIView):
    parser_class=(FileUploadParser,)
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = AnswerQuerySerializer(data=request.data)
        answer=request.data.get('answer')
        id=request.data.get('id')
        c=WatchedVideos.objects.get(sno=int(id))
        c.answer=answer
        c.save()
        return Response({'Response':'Done'},status=200)
class AddCart(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = AddCartSerializer(data=request.data)
        id=request.data.get('course')
        c=Courses.objects.get(sno=int(id))
        cart=Cart(course=c,user=request.user)
        cart.save()
        return Response({'Response':'done'},status=200)
class AddTestCart(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = AddTestCartSerializer(data=request.data)
        id=request.data.get('test')
        
        c=Test.objects.get(sno=int(id))
        # print(c)
        cart=TestCart(test=c,user=request.user)
        cart.save()
        return Response({'Response':'done'},status=200)
class RemoveCart(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = RemoveCartSerializer(data=request.data)
        id=request.data.get('sno')
        print(id)
        try:
            c=Cart.objects.filter(course_id=int(id)).filter(user=request.user)
            c.delete()
        except:
            pass
        return Response({'Response':'done'},status=200)
class RemoveTestCart(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = RemoveTestCartSerializer(data=request.data)
        id=request.data.get('sno')
        
        try:
            c=TestCart.objects.filter(test_id=int(id)).filter(user=request.user)
            c.delete()
        except:
            pass
        return Response({'Response':'done'},status=200)
class GetCart(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        c=list(Cart.objects.filter(user=request.user).order_by().values())
        
        return Response({'Response':(c)},status=200)
class GetDetailedCart(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        c=list(Cart.objects.filter(user=request.user).order_by())
        t=list(TestCart.objects.filter(user=request.user).order_by())
        cartItems=[]
        carttItems=[]
        ct=[]
        print(t)
        for item in c:
            cartItems.append([(Courses.objects.filter(sno=item.course_id).values()),item.sno])
        for item in t:
            
            carttItems.append([(Test.objects.filter(sno=item.test_id).values()),item.sno])
            print(carttItems)
        ct.append(cartItems)
        ct.append(carttItems)

        return Response({'Response':ct},status=200)


@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def checkhreg(request):
    htp=''
    htp=list(HomeTutor.objects.filter(user=request.user).values())
    return Response({'courses':htp},status=200)

@api_view(['POST', ])
@permission_classes(( ))
@authentication_classes([])
def gethomet(request):
    serializer = GetHomeTutorSerializer(data=request.data)
    pin=request.data.get('pin')
    classes=request.data.get('classes')
    sub=request.data.get('sub')
    htp=(HomeTutor.objects.filter(pin=int(pin)).values())
    result=Q()
    result1=Q()
    for i in classes:
        result=result | Q(classes__icontains=str(i).split(' ')[1])
    for i2 in sub:
        result1=result1 | Q(subject__icontains=str(i2))
    htp=htp.filter(result)
    htp=htp.filter(result1)
    return Response({'courses':htp},status=200)
@csrf_exempt
def buynow(request):
    if request.method=='POST':
        cid=request.POST.get('cid')[1:-1].split(',')
        cid1=request.POST.get('cid2')[1:-1].split(',')
        cs=request.POST.get('cso')
        print(len(cid))
        print(len(cid1))
        l=0
        id=''
        if(len(cid1)>1):
            for item in cid:
                id=id+str(Courses.objects.get(sno=int(item)).sno)+'H'
                l+=int(Courses.objects.get(sno=int(item)).pricing)
        if(len(cid1)>1):
            for item in cid1:
                id=id+str(Test.objects.get(sno=int(item)).sno)+'H'
                l+=int(Test.objects.get(sno=int(item)).Price)
        param_dict = {

                    'MID': 'RLUAjJ34588862174269',
                    'ORDER_ID': cs,
                    'TXN_AMOUNT':str(l),
                    'CUST_ID': 'ssygi0007@gmail.com',
                    'INDUSTRY_TYPE_ID': 'Retail',
                    'WEBSITE': 'WEBSTAGING',
                    'CHANNEL_ID': 'WEB',
                    'CALLBACK_URL':'http://192.168.43.152:80/api/handleRequest/',

        }
        param_dict['CHECKSUMHASH'] = Checksum.generate_checksum(param_dict, MERCHANT_KEY)
        return render(request,'home/paytm.html',{'param_dict':param_dict})
    
    return redirect('/cart')
def payment(request):
    return render(request,'home/paymentStatus.html')
@csrf_exempt
def handleRequest(request):
    form = request.POST
    response_dict = {}
    stat=1
    for i in form.keys():
        response_dict[i] = form[i]
        if i == 'CHECKSUMHASH':
            checksum = form[i]
            stat=0
    verify = Checksum.verify_checksum(response_dict, MERCHANT_KEY, checksum)
    if verify:
        if response_dict['RESPCODE'] == '01':
            status='TXN_SUCCESS'
            
        else:
            status="TXN_FAILURE"
    return JsonResponse({'data':response_dict,'status':stat})


class AddToMyCourses(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = ADDMYCOURSESSerializer(data=request.data)
        c=request.data.get('course')
        t=request.data.get('test')
        cs=request.data.get('cartid')
        cs1=cs.split('HT')
        
        cso=cs1[0].split('H')
        if len(cs1)>1:
            cso1=cs1[1].split('T')
        for item in range(len(cso)-1):
            m=MyCourses(course=Courses.objects.get(sno=int(c[item])),order_id=int(cso[item]),user=request.user)
            m.save()
            c=Cart.objects.get(sno=int(cso[item]))
            c.delete()
        if len(cs1)>1:
            cso1=cs1[1].split('T')
            for item in range(len(cso1)-1):
                
                m=MyTest(test=Test.objects.get(sno=int(t[item])),order_id=int(cso1[item]),user=request.user)
                m.save()
                c=TestCart.objects.get(sno=int(cso1[item]))
                c.delete()

        return Response({'Response':'cartItems'},status=200)
class Contactus(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = ContactUs(data=request.data)
        name=request.data.get('name')
        email=request.data.get('email')
        query=request.data.get('query')
        c=Contact(name=name,username=request.user.username,email=email,user=request.user,content=query)
        c.save()
        return Response({'Response':'Ok'},status=200)
class Quize(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = TestSerializer(data=request.data)
        id=request.data.get('id')
        q=list(Test.objects.filter(sno=id).values())
        
        return Response({'Response':q},status=200)
class SubmitQuize(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = TestResultSerializer(data=request.data)
        test=request.data.get('test')
        answer=request.data.get('answer')
        correct=request.data.get('correct')
        t=Test.objects.get(sno=int(test))
        st=TestResult(user=request.user,test=t,useranswer=answer,correct=int(correct))
        
        return Response({'Response':'Ok'},status=200)
class GetQuizeResult(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = GetQuizeResultSerializer(data=request.data)
        test=request.data.get('id')
        t=TestResult.objects.filter(sno=int(test)).filter(user=request.user).values()
        gt=Test.objects.filter(sno=int(t[0]['test_id'])).values()
        allt=TestResult.objects.all()
        avg=0
        maxm=0
        for item in allt:
            if item.correct>maxm:
                maxm=item.correct
            avg+=item.correct
        avg/=len(allt)
        l=[]
        l.append((t))
        l.append(avg)
        l.append(maxm)
        l.append(gt)
        return Response({'Response':l},status=200)

@api_view(['POST', ])
@permission_classes((IsAuthenticated, ))
@authentication_classes([TokenAuthentication])
def testall(request):
    serializer = TestAllSerializer(data=request.data)
    cat=request.data.get('s')
    scat=request.data.get('sc')
    scat2=request.data.get('sc2')
    v=cat+'/'+scat+'/'+scat2
    courses=(Test.objects.filter(category__icontains=v).values().order_by('category'))
    c=[]
    for item in courses:
        print(item['sno'])
        q=TestCart.objects.filter(user=request.user).filter(test_id=item['sno'])
        if len(q)>0:
            c.append([item,1])
        else:
            c.append([item,0])
    return Response({'courses':c},status=200)

class GetMyTest(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        t=list(MyTest.objects.filter(user=request.user).order_by())
        carttItems=[]
        for item in t:
            y=TestResult.objects.filter(test_id=item.test_id).filter(user=request.user).values()
            
            if len(y)>0:
                time=y[0]['timeStamp']
                st='given'
            else:
                time=''
                st='notgiven'
            carttItems.append([(Test.objects.filter(sno=item.test_id).values()),item.sno,item.timeStamp,st,time])
        return Response({'Response':carttItems},status=200)
class GetMyCourse(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        t=list(MyCourses.objects.filter(user=request.user).order_by())
        carttItems=[]
        for item in t:
            carttItems.append(Courses.objects.filter(sno=item.course_id).values())
        return Response({'Response':carttItems},status=200)
class GetPaidVideos(APIView):
    authentication_classes = [TokenAuthentication,]
    permission_classes = [IsAuthenticated,]
    def post(self,request):
        serializer = GetPaidVideos(data=request.data)
        id=request.data.get('sno')
        t=list(Videos.objects.filter(videoOfCourse_id=int(id)).order_by('timeStamp').values())
        carttItems=[]
        c=0
        urli=''
        for item in t:
            c+=1
            if c==1:
                file=item['videofile']
                client=session.client('s3',region_name='sgp1',endpoint_url='https://sgp1.digitaloceanspaces.com',aws_access_key_id=key,aws_secret_access_key=secret)
                urli=client.generate_presigned_url(ClientMethod='get_object',Params={'Bucket':'cognedu-spaces','Key':file},ExpiresIn=30            
                carttItems.append([item,urli])
        return Response({'Response':carttItems},status=200)
